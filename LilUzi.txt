creating table 

CREATE TABLE departments5 (
department_id NUMBER PRIMARY KEY,
department_name VARCHAR2(50),
manager_id NUMBER,
location_id NUMBER
);
INSERT INTO departments5 values (1, &#39;IT&#39;, 101, 10);
INSERT INTO departments5 values (2, &#39;Sales&#39;, 102, 20);
INSERT INTO departments5 values (3, &#39;HR&#39;, 103, 30);
INSERT INTO departments5 values (4, &#39;Finance&#39;, 104, 40);
INSERT INTO departments5 values (5, &#39;Marketing&#39;, 105, 50);
INSERT INTO departments5 values (6, &#39;Operations&#39;, 106, 60);
INSERT INTO departments5 values (7, &#39;Legal&#39;, 107, 70);
INSERT INTO departments5 values (8, &#39;Customer Service&#39;, 108, 80);
INSERT INTO departments5 values (9, &#39;Research and Development&#39;, 109, 90);
INSERT INTO departments5 values (10, &#39;Logistics&#39;, 110, 100);

CREATE TABLE employees5 (
    employee_id NUMBER PRIMARY KEY,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    job_id NUMBER,
    department_id NUMBER,
    salary NUMBER,
    manager_id NUMBER
);
INSERT INTO employees5  VALUES
(1, &#39;John&#39;, &#39;Doe&#39;, 201, 1, 60000, 101);
INSERT INTO employees5  VALUES(2, &#39;Jane&#39;, &#39;Smith&#39;, 202, 1, 65000, 101);
INSERT INTO employees5  VALUES(3, &#39;Mike&#39;, &#39;Johnson&#39;, 203, 2, 70000, 102);
INSERT INTO employees5  VALUES(4, &#39;Emily&#39;, &#39;Davis&#39;, 204, 3, 55000, 103);
INSERT INTO employees5  VALUES(5, &#39;Chris&#39;, &#39;Brown&#39;, 205, 4, 50000, NULL);
INSERT INTO employees5  VALUES(6, &#39;Sarah&#39;, &#39;Wilson&#39;, 206, 5, 55000, 105);
INSERT INTO employees5  VALUES(7, &#39;David&#39;, &#39;Lee&#39;, 207, 6, 60000, 106);
INSERT INTO employees5  VALUES(8, &#39;Laura&#39;, &#39;Martinez&#39;, 208, 7, 62000, 107);

INSERT INTO employees5  VALUES(9, &#39;Robert&#39;, &#39;Garcia&#39;, 209, 8, 48000, 108);
INSERT INTO employees5  VALUES(10, &#39;Jessica&#39;, &#39;Harris&#39;, 210, 9, 70000, 109);
INSERT INTO employees5  VALUES(11, &#39;Daniel&#39;, &#39;Clark&#39;, 211, 10, 75000, NULL);
CREATE TABLE jobs5 (
    job_id NUMBER PRIMARY KEY,
    job_title VARCHAR2(50)
);
INSERT INTO jobs5  VALUES
(201, &#39;Developer&#39;);
INSERT INTO jobs5  VALUES(202, &#39;Tester&#39;);
INSERT INTO jobs5  VALUES(203, &#39;Sales Manager&#39;);
INSERT INTO jobs5  VALUES(204, &#39;HR Specialist&#39;);
INSERT INTO jobs5  VALUES(205, &#39;Accountant&#39;);
INSERT INTO jobs5  VALUES(206, &#39;Marketing Manager&#39;);
INSERT INTO jobs5  VALUES(207, &#39;Operations Manager&#39;);
INSERT INTO jobs5  VALUES(208, &#39;Legal Advisor&#39;);
INSERT INTO jobs5  VALUES(209, &#39;Customer Support&#39;);
INSERT INTO jobs5  VALUES(210, &#39;Research Scientist&#39;);
INSERT INTO jobs5  VALUES(211, &#39;Logistics Coordinator&#39;);
CREATE TABLE locations5 (
    location_id NUMBER PRIMARY KEY,
    city VARCHAR2(50)
);
INSERT INTO locations5  VALUES
(10, &#39;New York&#39;);
INSERT INTO locations5  VALUES(20, &#39;Seattle&#39;);
INSERT INTO locations5  VALUES(30, &#39;San Francisco&#39;);
INSERT INTO locations5  VALUES(40, &#39;Chicago&#39;);
INSERT INTO locations5  VALUES(50, &#39;Los Angeles&#39;);
INSERT INTO locations5  VALUES(60, &#39;Dallas&#39;);
INSERT INTO locations5  VALUES(70, &#39;Houston&#39;);
INSERT INTO locations5  VALUES(80, &#39;Miami&#39;);
INSERT INTO locations5  VALUES(90, &#39;Boston&#39;);
INSERT INTO locations5  VALUES(100, &#39;Philadelphia&#39;);
CREATE TABLE job_history5 (
    employee_id NUMBER,
    job_id NUMBER,
    start_date DATE,
    end_date DATE,
    PRIMARY KEY (employee_id, job_id, start_date)
);
INSERT INTO job_history (employee_id, job_id, start_date, end_date) VALUES
(1, 201, DATE &#39;2022-01-01&#39;, DATE &#39;2023-01-01&#39;);
INSERT INTO job_history (employee_id, job_id, start_date, end_date) VALUES(2, 202, DATE
&#39;2022-06-01&#39;, DATE &#39;2023-06-01&#39;);
INSERT INTO job_history (employee_id, job_id, start_date, end_date) VALUES (3, 203, DATE
&#39;2021-01-01&#39;, DATE &#39;2022-01-01&#39;);

INSERT INTO job_history (employee_id, job_id, start_date, end_date) VALUES(4, 204, DATE
&#39;2022-05-01&#39;, DATE &#39;2023-05-01&#39;);
INSERT INTO job_history (employee_id, job_id, start_date, end_date) VALUES (5, 205, DATE
&#39;2023-01-01&#39;, DATE &#39;2024-01-01&#39;);
INSERT INTO job_history (employee_id, job_id, start_date, end_date) VALUES(6, 206, DATE
&#39;2022-03-01&#39;, DATE &#39;2023-03-01&#39;);
INSERT INTO job_history (employee_id, job_id, start_date, end_date) VALUES(7, 207, DATE
&#39;2022-04-01&#39;, DATE &#39;2023-04-01&#39;);
INSERT INTO job_history (employee_id, job_id, start_date, end_date) VALUES(8, 208, DATE
&#39;2022-07-01&#39;, DATE &#39;2023-07-01&#39;);
INSERT INTO job_history (employee_id, job_id, start_date, end_date) VALUES(9, 209, DATE
&#39;2022-08-01&#39;, DATE &#39;2023-08-01&#39;);
INSERT INTO job_history (employee_id, job_id, start_date, end_date) VALUES(10, 210, DATE
&#39;2022-09-01&#39;, DATE &#39;2023-09-01&#39;);
INSERT INTO job_history (employee_id, job_id, start_date, end_date) VALUES(11, 211, DATE
&#39;2022-10-01&#39;, DATE &#39;2023-10-01&#39;);


------------------------------------------------------------------------------------------------------------------

Sure! Here are examples of each SQL command mentioned in your lab manual:

### **Constraints and Their Types**

1. **NOT NULL**
   ```sql
   CREATE TABLE Students (
       StudentID int NOT NULL,
       Name varchar(100) NOT NULL,
       Age int
   );
   ```

   ```sql
   ALTER TABLE Students MODIFY Age int NOT NULL;
   ```

2. **UNIQUE**
   ```sql
   CREATE TABLE Courses (
       CourseID int NOT NULL UNIQUE,
       CourseName varchar(100)
   );
   ```

   ```sql
   ALTER TABLE Courses ADD CONSTRAINT UC_Course UNIQUE (CourseID, CourseName);
   ```

3. **PRIMARY KEY**
   ```sql
   CREATE TABLE Departments (
       DeptID int NOT NULL PRIMARY KEY,
       DeptName varchar(100)

   );
   ```

   ```sql
   ALTER TABLE Departments ADD PRIMARY KEY (DeptID);
   ```

4. **FOREIGN KEY**
   ```sql
   CREATE TABLE Employees (
       EmpID int NOT NULL PRIMARY KEY,
       EmpName varchar(100),
       DeptID int,
       FOREIGN KEY (DeptID) REFERENCES Departments(DeptID)
   );
   ```

   ```sql
   ALTER TABLE Employees ADD CONSTRAINT FK_Dept FOREIGN KEY (DeptID) REFERENCES Departments(DeptID);
   ```

5. **CHECK**
   ```sql
   CREATE TABLE Products (
       ProductID int NOT NULL,
       ProductName varchar(100),
       Price decimal(10, 2) CHECK (Price > 0)
   );
   ```

   ```sql
   ALTER TABLE Products ADD CONSTRAINT CHK_Price CHECK (Price > 0);
   ```

6. **DEFAULT**
   ```sql
   CREATE TABLE Orders (
       OrderID int NOT NULL,
       OrderDate date DEFAULT GETDATE(),
       TotalAmount decimal(10, 2)
   );
   ```

   ```sql
   ALTER TABLE Orders ALTER COLUMN OrderDate SET DEFAULT GETDATE();
   ```

7. **CREATE INDEX**
   ```sql
   CREATE UNIQUE INDEX IDX_Customer ON Customers (CustomerID);
   ```

   ```sql
   DROP INDEX IDX_Customer ON Customers;
   ```

### **DML (Data Manipulation Language) Commands**

1. **INSERT**
   ```sql
   INSERT INTO Employees VALUES (1, 'John Doe', 101);
   ```

   ```sql
   INSERT INTO Employees (EmpID, EmpName, DeptID) VALUES (2, 'Jane Smith', 102);
   ```

2. **UPDATE**
   ```sql
   UPDATE Employees SET EmpName = 'Johnathan Doe' WHERE EmpID = 1;
   ```

3. **DELETE**
   ```sql
   DELETE FROM Employees WHERE EmpID = 2;
   ```

### **DDL (Data Definition Language) Commands**

1. **CREATE**
   ```sql
   CREATE DATABASE UniversityDB;
   ```

   ```sql
   CREATE TABLE Subjects (
       SubjectID int NOT NULL,
       SubjectName varchar(100)
   );
   ```

2. **ALTER**
   ```sql
   ALTER TABLE Subjects ADD Credits int;
   ```

   ```sql
   ALTER TABLE Subjects DROP COLUMN Credits;
   ```

   ```sql
   ALTER TABLE Subjects MODIFY SubjectName varchar(200);
   ```

3. **DROP**
   ```sql
   DROP TABLE Subjects;
   ```

   ```sql
   DROP DATABASE UniversityDB;
   ```

4. **TRUNCATE**
   ```sql
   TRUNCATE TABLE Orders;
   ```

5. **COMMENT**
   ```sql
   -- This is a single line comment
   
   /* This is a 
      multi-line comment */
   ```

6. **RENAME**
   ```sql
   ALTER TABLE Subjects RENAME TO Courses;
   ```

   ```sql
   ALTER TABLE Courses RENAME COLUMN SubjectName TO CourseName;
   ```

These examples demonstrate how each SQL command works based on the lab manual!

------------------------------------------------------------------------------------------------------------------

The main difference between `UPDATE` and `ALTER` lies in what they modify in the database:

1. **UPDATE**: This command is used to modify **data** (i.e., the values inside the rows of a table) in an existing table. You typically use `UPDATE` when you want to change the content of a record without affecting the structure of the table.

   **Example**:
   ```sql
   UPDATE Employees 
   SET EmpName = 'Johnathan Doe' 
   WHERE EmpID = 1;
   ```
   - **Explanation**: This `UPDATE` command changes the `EmpName` to "Johnathan Doe" for the employee whose `EmpID` is 1. The structure of the `Employees` table remains unchanged.

2. **ALTER**: This command is used to modify the **structure** of the table itself. You use `ALTER` when you want to add, delete, or modify columns, constraints, or other elements of the table schema.

   **Example**:
   ```sql
   ALTER TABLE Employees 
   ADD Age int;
   ```
   - **Explanation**: This `ALTER` command adds a new column called `Age` of type `int` to the `Employees` table. The structure of the table is altered by adding a new column, but no data is modified.

### Key Difference:
- **UPDATE**: Changes the **data** in existing rows.
- **ALTER**: Changes the **structure** of the table (e.g., adding columns, modifying column data types, or constraints).

---

### Another Example for Comparison:

#### `UPDATE` Example:
```sql
UPDATE Products
SET Price = 20
WHERE ProductID = 101;
```
- **Purpose**: Changes the `Price` to 20 for the product with `ProductID` 101. The table structure remains the same, only the data changes.

#### `ALTER` Example:
```sql
ALTER TABLE Products
ADD Stock int;
```
- **Purpose**: Adds a new column `Stock` to the `Products` table. The table structure is modified to accommodate this new column.

------------------------------------------------------------------------------------------------------------------

Here’s a summarized explanation of the lab concepts with example SQL commands:

### 1. **GROUP BY Statement**:
The `GROUP BY` clause groups rows that have the same values into summary rows.

**Example**: Find the average salary for each department.

```sql
SELECT department_id, AVG(salary) AS average_salary
FROM employees
GROUP BY department_id;
```

### 2. **HAVING Clause**:
The `HAVING` clause is used to filter groups based on a condition after grouping.

**Example**: Show items where total sales are less than 1000.

```sql
SELECT item, SUM(sale) AS total_sales
FROM salesdepartment
GROUP BY item
HAVING SUM(sale) < 1000;
```

### 3. **Subqueries**:

#### a. **Single Row Subquery**:
Returns a single value.

**Example**: Find employees with the same job as employee with ID 115.

```sql
SELECT first_name, job_id 
FROM employees 
WHERE job_id = (SELECT job_id FROM employees WHERE employee_id = 115);
```

#### b. **Multiple Row Subquery**:
Returns multiple values using operators like `IN`, `ANY`, `ALL`.

**Example**: Find employees working in departments located at location ID 1700.

```sql
SELECT first_name, department_id
FROM employees
WHERE department_id IN (SELECT department_id FROM departments WHERE location_id = 1700);
```

#### c. **Correlated Subquery**:
Depends on data from the outer query.

**Example**: Find employees whose salary is higher than the average salary of their department.

```sql
SELECT employee_id, first_name, salary
FROM employees e
WHERE salary > (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id);
```

### 4. **Subqueries with DML**:

#### a. **INSERT with Subquery**:
Insert data from one table to another based on a condition.

**Example**: Insert employees with job title 'Accountant' into `employee_bkp` table.

```sql
INSERT INTO employee_bkp
SELECT * FROM employees
WHERE job_id IN (SELECT job_id FROM jobs WHERE job_title = 'Accountant');
```

#### b. **UPDATE with Subquery**:
Update records based on a subquery.

**Example**: Increase the salary by 10% for employees with a job ID associated with a minimum salary of 3000.

```sql
UPDATE employees
SET salary = salary + (0.1 * salary)
WHERE job_id IN (SELECT job_id FROM jobs WHERE min_salary = 3000);
```

#### c. **DELETE with Subquery**:
Delete records based on conditions from a subquery.

**Example**: Delete records from `employee_bkp` table where the job ID is associated with jobs that ended on '31-Dec-06'.

```sql
DELETE FROM employee_bkp
WHERE job_id IN (SELECT job_id FROM job_history WHERE end_date = '31-Dec-06');
```

These examples cover the key concepts from the lab manual. Let me know if you need further clarification!

------------------------------------------------------------------------------------------------------------------

SELECT job_title, AVG(salary) AS avg_salary
FROM employees
GROUP BY job_title
HAVING AVG(salary) > 6000;



select j.job_title from (select * from employees e join departments d on e.department_id = d.department_id join locations l on l.location_id = d.location_id
    where e.salary < (select avg(em.salary) from employees em join departments dm on dm.department_id = em.department_id where dm.location_id ='1700')) e join jobs j on e.job_id = j.job_id
    group by j.job_title
    having avg(e.salary) > 6000;


select e.first_name, e.last_name, m.first_name as "Manager Name" from employees e right join employees m on m.manager_id = e.employee_id;


4.select first_name, hire_date from employees where to_char(HIRE_DATE, 'YYYY') between 2001 and 2003 order by hire_date desc;



5.select count(e.manager_id) from employees e join employees m on m.employee_id = e.manager_id group by e.manager_id having count(e.manager_id) = 5;


select d.department_name, count(*) as NUM_EMPLOYEES from employees e join departments d on d.department_id = e.department_id  group by d.department_name having count(*) > 1 order by count(*); 




select distinct e.department_id, d.department_name, e.first_name from employees e join departments d on d.department_id = e.department_id, employees em where e.employee_id <> em.manager_id and e.first_name like '__a%'




